datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

enum UserRole {
  ADMIN
  USER
}

enum DefaultTransactionsNature {
  CREDIT
  DEBIT
  MONEY
}

enum CurrencyEnum {
  USD
  BRL
}

enum LanguageEnum {
  enUS
  ptBR
}

model User {
  id                    String                 @id @default(cuid())
  name                  String?
  email                 String                 @unique
  fixedIncome           Decimal                @default(0.0) @db.Decimal(10, 2)
  fixedExpenses         Decimal                @default(0.0) @db.Decimal(10, 2)
  savedAmmount          Decimal                @default(0.0) @db.Decimal(10, 2)
  emailVerified         DateTime?
  birthday              DateTime?
  image                 String?
  password              String?
  role                  UserRole               @default(USER)
  accounts              Account[]
  isTwoFactorEnabled    Boolean                @default(false)
  twoFactorConfirmation TwoFactorConfirmation?
  transactionCategory   TransactionCategory[]
  userPreferences       UserPreferences[]
  goals                 UserGoal[]
  userCategory          UserCategory?

  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  twoFactorConfirmationId String?
}

model UserPreferences {
  id         String  @id @default(cuid())
  userId     String  @unique
  currencyId String
  languageId String
  darkMode   Boolean @default(false)

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  currency Currency @relation(fields: [currencyId], references: [id], onDelete: NoAction)
  language Language @relation(fields: [languageId], references: [id], onDelete: NoAction)
}

model Transaction {
  id                  String                @id @default(cuid())
  description         String
  value               Decimal               @default(0.0) @db.Decimal(10, 2)
  dueDate             DateTime
  isPaid              Boolean               @default(false)
  transactionCategory TransactionCategory[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TransactionCategory {
  id            String @id @default(cuid())
  userId        String
  transactionId String
  description   String

  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  transaction Transaction @relation(fields: [transactionId], references: [id], onDelete: NoAction)
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id String @id @default(cuid())

  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Currency {
  id       String       @id @default(cuid())
  currency CurrencyEnum @unique
  language String

  userPreferences UserPreferences[]
}

model Language {
  id       String       @id @default(cuid())
  code     LanguageEnum @unique
  language String

  userPreferences UserPreferences[]
}

model UserGoal {
  id          String    @id @default(cuid())
  userId      String
  description String
  goal        Decimal   @default(0.0) @db.Decimal(10, 2)
  saved       Decimal   @default(0.0) @db.Decimal(10, 2)
  until       DateTime?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserCategory {
  id          String @id @default(cuid())
  userId      String
  description String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}
